// Code generated by MockGen. DO NOT EDIT.
// Source: infrastructure/apm/apm.go
//
// Generated by this command:
//
//	mockgen -source=infrastructure/apm/apm.go -destination=infrastructure/apm/mock_apm.go -package=apm
//

// Package apm is a generated GoMock package.
package apm

import (
	context "context"
	reflect "reflect"

	attribute "go.opentelemetry.io/otel/attribute"
	gomock "go.uber.org/mock/gomock"
)

// MockTracer is a mock of Tracer interface.
type MockTracer struct {
	ctrl     *gomock.Controller
	recorder *MockTracerMockRecorder
}

// MockTracerMockRecorder is the mock recorder for MockTracer.
type MockTracerMockRecorder struct {
	mock *MockTracer
}

// NewMockTracer creates a new mock instance.
func NewMockTracer(ctrl *gomock.Controller) *MockTracer {
	mock := &MockTracer{ctrl: ctrl}
	mock.recorder = &MockTracerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTracer) EXPECT() *MockTracerMockRecorder {
	return m.recorder
}

// AddEvent mocks base method.
func (m *MockTracer) AddEvent(ctx context.Context, name string, attrs ...attribute.KeyValue) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, name}
	for _, a := range attrs {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddEvent", varargs...)
}

// AddEvent indicates an expected call of AddEvent.
func (mr *MockTracerMockRecorder) AddEvent(ctx, name any, attrs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, name}, attrs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEvent", reflect.TypeOf((*MockTracer)(nil).AddEvent), varargs...)
}

// EndAPM mocks base method.
func (m *MockTracer) EndAPM() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EndAPM")
}

// EndAPM indicates an expected call of EndAPM.
func (mr *MockTracerMockRecorder) EndAPM() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndAPM", reflect.TypeOf((*MockTracer)(nil).EndAPM))
}

// EndTransaction mocks base method.
func (m *MockTracer) EndTransaction(txn any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EndTransaction", txn)
}

// EndTransaction indicates an expected call of EndTransaction.
func (mr *MockTracerMockRecorder) EndTransaction(txn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndTransaction", reflect.TypeOf((*MockTracer)(nil).EndTransaction), txn)
}

// GetTraceID mocks base method.
func (m *MockTracer) GetTraceID(ctx context.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTraceID", ctx)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTraceID indicates an expected call of GetTraceID.
func (mr *MockTracerMockRecorder) GetTraceID(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTraceID", reflect.TypeOf((*MockTracer)(nil).GetTraceID), ctx)
}

// StartTransaction mocks base method.
func (m *MockTracer) StartTransaction(ctx context.Context, name string) (context.Context, any) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTransaction", ctx, name)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(any)
	return ret0, ret1
}

// StartTransaction indicates an expected call of StartTransaction.
func (mr *MockTracerMockRecorder) StartTransaction(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTransaction", reflect.TypeOf((*MockTracer)(nil).StartTransaction), ctx, name)
}
